"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTableMetadata = exports.publish = exports.addToSolution = exports.ComponentType = void 0;
const node_1 = require("dataverse-webapi/lib/node");
var ComponentType;
(function (ComponentType) {
    ComponentType[ComponentType["WebResource"] = 61] = "WebResource";
    ComponentType[ComponentType["PluginType"] = 90] = "PluginType";
    ComponentType[ComponentType["PluginAssembly"] = 91] = "PluginAssembly";
    ComponentType[ComponentType["SDKMessageProcessingStep"] = 92] = "SDKMessageProcessingStep";
    ComponentType[ComponentType["SDKMessageProcessingStepImage"] = 93] = "SDKMessageProcessingStepImage";
})(ComponentType = exports.ComponentType || (exports.ComponentType = {}));
async function addToSolution(id, solution, type, apiConfig) {
    const data = {
        ComponentId: id,
        ComponentType: type,
        SolutionUniqueName: solution,
        AddRequiredComponents: false,
        IncludedComponentSettingsValues: null
    };
    await (0, node_1.unboundAction)(apiConfig, 'AddSolutionComponent', data);
}
exports.addToSolution = addToSolution;
async function publish(publishXml, apiConfig) {
    const data = {
        ParameterXml: `<importexportxml><webresources>${publishXml}</webresources></importexportxml>`
    };
    await (0, node_1.unboundAction)(apiConfig, 'PublishXml', data);
}
exports.publish = publish;
async function getTableMetadata(table, apiConfig) {
    const options = [
        '?$select=DisplayName,LogicalName,EntitySetName,SchemaName',
        '&$expand=Attributes($select=LogicalName,SchemaName)'
    ].join('');
    const metadata = await (0, node_1.retrieveMultiple)(apiConfig, `EntityDefinitions(LogicalName='${table}')`, options);
    if (metadata == null) {
        throw Error(`Table ${table} not found in metadata cache`);
    }
    const choiceOptions = [
        '?$select=attributevalue,value,attributename',
        `&$filter=objecttypecode eq '${table}'`
    ].join('');
    const choiceMetadata = await (0, node_1.retrieveMultiple)(apiConfig, 'stringmaps', choiceOptions);
    const tableMetadata = {
        logicalName: metadata.LogicalName,
        schemaName: metadata.SchemaName,
        entitySetName: metadata.EntitySetName,
        choices: [],
        fields: metadata.Attributes.map((a) => {
            return {
                logicalName: a.LogicalName,
                schemaName: a.SchemaName
            };
        })
    };
    choiceMetadata.value.forEach((c) => {
        const index = tableMetadata.choices.findIndex(x => x.column === c.attributename);
        if (index === -1) {
            tableMetadata.choices.push({ column: c.attributename, options: [{ text: c.value, value: c.attributevalue }] });
        }
        else {
            tableMetadata.choices[index].options.push({ text: c.value, value: c.attributevalue });
        }
    });
    return tableMetadata;
}
exports.getTableMetadata = getTableMetadata;
