#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const deploy_1 = __importDefault(require("./deploy"));
const generate_1 = __importDefault(require("./generate"));
// eslint-disable-next-line @typescript-eslint/no-var-requires
const packageJson = require('../package.json');
commander_1.program
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    .version(packageJson.version)
    .usage('<command> [options]');
// Deploy command
commander_1.program
    .command('deploy')
    .description('Deploy file(s) to dataverse (webresource, plugin, workflow)')
    .argument('[type]', 'Type of project to deploy')
    .argument('[files]', 'Comma separate list of files to deploy')
    .action((type, files) => {
    (0, deploy_1.default)(type, files);
});
// Generate command
commander_1.program
    .command('generate')
    .description('Generate early-bound TypeScript file for specified table')
    .argument('[table]', 'Table to generate')
    .action((table) => {
    (0, generate_1.default)(table);
});
// Show help on unknown command
commander_1.program
    .arguments('<command>')
    .action((cmd) => {
    commander_1.program.outputHelp();
    console.log();
    console.log(`Unknown command ${cmd}.`);
    console.log();
});
commander_1.program.parse(process.argv);
if (!process.argv.slice(2).length) {
    commander_1.program.outputHelp();
}
