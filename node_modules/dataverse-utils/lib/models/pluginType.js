"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployType = void 0;
const node_1 = require("dataverse-webapi/lib/node");
const pluginStep_1 = require("./pluginStep");
const logger_1 = require("../logger");
async function deployType(type, assemblyId, apiConfig, solution) {
    let typeId = await retrieveType(type.typename, assemblyId, apiConfig);
    const record = {
        name: type.name,
        friendlyname: type.friendlyname,
        typename: type.typename,
        'pluginassemblyid@odata.bind': type['pluginassemblyid@odata.bind'],
        workflowactivitygroupname: type.workflowactivitygroupname
    };
    if (typeId != '') {
        try {
            await updateType(typeId, record, apiConfig);
        }
        catch (error) {
            throw new Error(`failed to update plugin type: ${error.message}`);
        }
    }
    else {
        try {
            typeId = await createType(record, apiConfig);
        }
        catch (error) {
            throw new Error(`failed to create plugin type: ${error.message}`);
        }
    }
    try {
        if (type.steps) {
            const promises = type.steps.map(async (step) => {
                step['plugintypeid@odata.bind'] = `/plugintypes(${typeId})`;
                await (0, pluginStep_1.deployStep)(step, typeId, apiConfig, solution);
            });
            await Promise.all(promises);
        }
    }
    catch (error) {
        throw new Error(error.message);
    }
    return typeId;
}
exports.deployType = deployType;
async function retrieveType(name, assemblyId, apiConfig) {
    const options = `$select=plugintypeid&$filter=typename eq '${name}' and _pluginassemblyid_value eq ${assemblyId}`;
    const result = await (0, node_1.retrieveMultiple)(apiConfig, 'plugintypes', options);
    return result.value.length > 0 ? result.value[0].plugintypeid : '';
}
async function createType(type, apiConfig) {
    logger_1.logger.info(`create assembly type ${type.name}`);
    const result = await (0, node_1.createWithReturnData)(apiConfig, 'plugintypes', type, '$select=plugintypeid');
    if (result.error) {
        throw new Error(result.error.message);
    }
    return result.plugintypeid;
}
async function updateType(id, type, apiConfig) {
    logger_1.logger.info(`update assembly type ${type.name}`);
    return (0, node_1.update)(apiConfig, 'plugintypes', id, type);
}
