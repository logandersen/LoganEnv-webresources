"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployImage = void 0;
const logger_1 = require("../logger");
const node_1 = require("dataverse-webapi/lib/node");
async function deployImage(stepId, image, message, apiConfig) {
    image['sdkmessageprocessingstepid@odata.bind'] = `/sdkmessageprocessingsteps(${stepId})`;
    switch (message) {
        case 'Create':
            image.messagepropertyname = 'Id';
            break;
        case 'SetState':
        case 'SetStateDynamicEntity':
            image.messagepropertyname = 'EntityMoniker';
            break;
        case 'Send':
        case 'DeliverIncoming':
        case 'DeliverPromote':
            image.messagepropertyname = 'EmailId';
            break;
        default:
            image.messagepropertyname = 'Target';
            break;
    }
    let imageId = await retrieveImage(stepId, image, apiConfig);
    if (imageId != '') {
        try {
            await updateImage(imageId, image, apiConfig);
        }
        catch (error) {
            throw new Error(`failed to update plugin image: ${error.message}`);
        }
    }
    else {
        try {
            imageId = await createImage(image, apiConfig);
        }
        catch (error) {
            throw new Error(`failed to create plugin image: ${error.message}`);
        }
    }
    return imageId;
}
exports.deployImage = deployImage;
async function retrieveImage(stepId, image, apiConfig) {
    const options = `$select=sdkmessageprocessingstepimageid&$filter=name eq '${image.name}' and _sdkmessageprocessingstepid_value eq ${stepId}`;
    const result = await (0, node_1.retrieveMultiple)(apiConfig, 'sdkmessageprocessingstepimages', options);
    return result.value.length > 0 ? result.value[0].sdkmessageprocessingstepimageid : '';
}
async function createImage(image, apiConfig) {
    logger_1.logger.info(`create plugin image ${image.name}`);
    const result = await (0, node_1.createWithReturnData)(apiConfig, 'sdkmessageprocessingstepimages', image, '$select=sdkmessageprocessingstepimageid');
    if (result.error) {
        throw new Error(result.error.message);
    }
    return result.sdkmessageprocessingstepimageid;
}
async function updateImage(id, image, apiConfig) {
    logger_1.logger.info(`update plugin image ${image.name}`);
    return (0, node_1.update)(apiConfig, 'sdkmessageprocessingstepimages', id, image);
}
