"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployStep = void 0;
const node_1 = require("dataverse-webapi/lib/node");
const dataverse_service_1 = require("../dataverse.service");
const logger_1 = require("../logger");
const pluginImage_1 = require("./pluginImage");
async function deployStep(step, typeId, apiConfig, solution) {
    let stepId = await retrieveStep(step.name, typeId, apiConfig);
    const messageId = await getSdkMessageId(step.message ?? '', apiConfig);
    if (messageId == '') {
        logger_1.logger.warn(`sdk message ${step.message} not found`);
        return;
    }
    const filterId = await getSdkMessageFilterId(messageId, step.entity ?? '', apiConfig);
    if (filterId == '') {
        logger_1.logger.warn(`sdk message ${step.message} for entity ${step.entity} not found`);
        return;
    }
    step['sdkmessagefilterid@odata.bind'] = `/sdkmessagefilters(${filterId})`;
    step['sdkmessageid@odata.bind'] = `/sdkmessages(${messageId})`;
    if (step.mode === 1) {
        step.asyncautodelete = true;
    }
    const images = step.images;
    const message = step.message;
    delete step.images;
    delete step.message;
    delete step.entity;
    if (stepId != '') {
        try {
            await updateStep(stepId, step, apiConfig);
        }
        catch (error) {
            throw new Error(`failed to update plugin step: ${error.message}`);
        }
    }
    else {
        try {
            stepId = await createStep(step, apiConfig);
        }
        catch (error) {
            throw new Error(`failed to create plugin step: ${error.message}`);
        }
        if (solution != undefined) {
            try {
                await (0, dataverse_service_1.addToSolution)(stepId, solution, dataverse_service_1.ComponentType.SDKMessageProcessingStep, apiConfig);
            }
            catch (error) {
                throw new Error(`failed to add to solution: ${error.message}`);
            }
        }
    }
    if (images && images.length > 0) {
        try {
            const promises = images.map(image => (0, pluginImage_1.deployImage)(stepId, image, message, apiConfig));
            await Promise.all(promises);
        }
        catch (error) {
            throw new Error(error.message);
        }
    }
    return stepId;
}
exports.deployStep = deployStep;
async function retrieveStep(name, typeId, apiConfig) {
    const options = `$select=sdkmessageprocessingstepid&$filter=name eq '${name}' and _plugintypeid_value eq ${typeId}`;
    const result = await (0, node_1.retrieveMultiple)(apiConfig, 'sdkmessageprocessingsteps', options);
    return result.value.length > 0 ? result.value[0].sdkmessageprocessingstepid : '';
}
async function getSdkMessageFilterId(messageId, entityName, apiConfig) {
    const options = [
        `?$filter=primaryobjecttypecode eq '${entityName}' and _sdkmessageid_value eq ${messageId}`,
        '&$select=sdkmessagefilterid'
    ].join('');
    const message = await (0, node_1.retrieveMultiple)(apiConfig, 'sdkmessagefilters', options);
    return message.value.length > 0 ? message.value[0].sdkmessagefilterid : '';
}
async function getSdkMessageId(name, apiConfig) {
    const options = [
        `?$filter=name eq '${name}'`,
        '&$select=sdkmessageid'
    ].join('');
    const message = await (0, node_1.retrieveMultiple)(apiConfig, 'sdkmessages', options);
    return message.value.length > 0 ? message.value[0].sdkmessageid : '';
}
async function createStep(step, apiConfig) {
    logger_1.logger.info(`create plugin step ${step.name}`);
    const result = await (0, node_1.createWithReturnData)(apiConfig, 'sdkmessageprocessingsteps', step, '$select=sdkmessageprocessingstepid');
    if (result.error) {
        throw new Error(result.error.message);
    }
    return result.sdkmessageprocessingstepid;
}
async function updateStep(id, step, apiConfig) {
    logger_1.logger.info(`update plugin step ${step.name}`);
    return (0, node_1.update)(apiConfig, 'sdkmessageprocessingsteps', id, step);
}
